{"version":3,"sources":["config.js","components/Player.jsx","App.js","serviceWorker.js","index.js"],"names":["apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Player","console","log","this","props","nom","logo","value","updateCount","class","src","alt","onClick","React","Component","App","firebase","length","config","state","data","loading","ref","on","snapshot","setState","val","forEach","snap","push","error","sortedData","sort","a","b","newValue","playerName","newState","index","findIndex","player","child","update","map","i","handleCount","bind","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+TAAe,G,YAAA,CACbA,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,iB,OCqDNC,E,yNAjDPC,QAAQC,IAAI,iB,+BAGN,IAAD,EAMLC,KAAKC,MAJLC,EAFK,EAELA,IACAC,EAHK,EAGLA,KACAC,EAJK,EAILA,MACAC,EALK,EAKLA,YAGJ,OACI,4BACI,yBAAKC,MAAM,uBACX,yBAAKA,MAAM,WACX,yBAAKA,MAAM,eACP,yBAAKC,IAAKJ,EAAMK,IAAI,GAAGF,MAAM,aAEjC,yBAAKA,MAAM,oBACP,wBAAIA,MAAM,cAAcJ,IAE5B,yBAAKI,MAAM,oBACP,wBAAIA,MAAM,cAAcF,IAE5B,yBAAKE,MAAM,eACP,4BACIA,MAAM,4BACNG,QAAU,WAEVJ,EAAYD,EAAQ,EAAEF,KAJ1B,MAQJ,yBAAKI,MAAM,eACP,4BACIA,MAAM,4BACNG,QAAU,WAEVJ,EAAYD,EAAQ,EAAEF,KAJ1B,a,GAxCKQ,IAAMC,WC0FZC,E,kDAtFb,WAAYX,GAAQ,IAAD,6BACjB,cAAMA,GACDY,OAAcC,QACjBD,gBAAuBE,GAEzB,EAAKC,MAAQ,CACXC,KAAM,GACNC,SAAS,GAPM,E,uLAYXC,EAAMN,aAAoBM,IAAI,WACpC,IACEA,EAAIC,GAAG,SAAS,SAAAC,GACd,EAAKC,SAAS,CACZL,KAAMI,EAASE,MACfL,SAAS,IAEX,IAAID,EAAO,GACXI,EAASG,SAAQ,SAACC,GAChBR,EAAKS,KAAKD,EAAKF,UAEjB,EAAKD,SAAS,CAAEL,YAElB,MAAOU,GACP7B,QAAQC,IAAI4B,G,kIAId,IAAIC,EAAa5B,KAAKgB,MAAMC,KAAKY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1B,MAAQ2B,EAAE3B,SAC5DJ,KAAKsB,SAAS,CACZL,KAAMW,M,kCAIEI,EAAUC,GACpB,IAAMd,EAAMN,aAAoBM,IAAI,WAChCe,EAAQ,YAAOlC,KAAKgB,MAAMC,MACxBkB,EAAQnC,KAAKgB,MAAMC,KAAKmB,WAAU,SAAAC,GAAM,OAAKA,EAAOnC,MAAQ+B,KAClEC,EAASC,GAAT,2BAAsBD,EAASC,IAA/B,IAAuC/B,MAAO4B,IAC9ChC,KAAKsB,SAAS,CACZL,KAAMiB,IAGR,IACEf,EAAImB,MAAMH,GAAOI,OAAO,CAACnC,MAAO4B,IAEhC,MAAOL,GACP7B,QAAQC,IAAI4B,M,+BAMN,IAAD,OACP,OACE,yBAAKrB,MAAM,OACT,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,qBACT,wBAAIA,MAAM,cAAV,yBAEF,yBAAKA,MAAM,+BACT,yBAAKA,MAAM,eACT,wBAAIA,MAAM,4BAENN,KAAKgB,MAAMC,KAAKuB,KAAK,SAACH,EAAQI,GAC5B,OACE,kBAAC,EAAD,CACEvC,IAAKmC,EAAOnC,IACZE,MAAOiC,EAAOjC,MACdC,YAAa,EAAKqC,YAAYC,KAAK,GACnCC,IAAKH,gB,GAzET9B,aCKEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACL7B,QAAQ6B,MAAMA,EAAMmC,c","file":"static/js/main.44e45979.chunk.js","sourcesContent":["export default {\n  apiKey: \"AIzaSyBNtfu70bVaj2KiA0Tlpv7rSiFxQGt_His\",\n  authDomain: \"chall-counter.firebaseapp.com\",\n  databaseURL: \"https://chall-counter.firebaseio.com\",\n  projectId: \"chall-counter\",\n  storageBucket: \"chall-counter.appspot.com\",\n  messagingSenderId: \"223353068983\"\n}","import React from 'react';\nimport 'bulma/css/bulma.css'\nimport '../App.css';\n\nclass Player extends React.Component {\n    incrementValue() {\n        \n    }\n\n    decrementValue() {\n        console.log('Cliqu√© -')\n    }\n\n    render() {\n    const {\n        nom,\n        logo,\n        value,\n        updateCount\n    } = this.props;\n\n    return (\n        <li>\n            <div class=\"notification player\">\n            <div class=\"columns\">\n            <div class=\"column is-2\">\n                <img src={logo} alt=\"\" class=\"exp-img\"/>\n            </div>\n            <div class=\"column text is-4\">\n                <h2 class=\"title is-5\">{nom}</h2>\n            </div>\n            <div class=\"column text is-2\">\n                <h3 class=\"title is-5\">{value}</h3>\n            </div>\n            <div class=\"column is-2\">\n                <button\n                    class=\"button is-primary is-ligh\"\n                    onClick={ () =>\n                {\n                    updateCount(value + 1,nom);\n                }\n                }>+</button>\n            </div>\n            <div class=\"column is-2\">\n                <button\n                    class=\"button is-danger is-light\" \n                    onClick={ () =>\n                {\n                    updateCount(value - 1,nom);\n                }\n                }>-</button>\n            </div>\n        </div>\n    </div>\n        </li>\n    )\n    }\n}\n\nexport default Player\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport config from './config';\nimport * as firebase from 'firebase'\n\nimport Player from './components/Player'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config)\n    }\n    this.state = {\n      data: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const ref = firebase.database().ref('players')\n    try {\n      ref.on('value', snapshot => {\n        this.setState({\n          data: snapshot.val(),\n          loading: false\n        })\n        let data = [];\n        snapshot.forEach((snap) => {\n          data.push(snap.val());\n        });\n        this.setState({ data });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  sortData() {\n    let sortedData = this.state.data.sort((a, b) => a.value < b.value);\n    this.setState({\n      data: sortedData\n    });\n  }\n\n  handleCount(newValue, playerName) {\n    const ref = firebase.database().ref('players')\n    let newState = [...this.state.data]\n    const index = this.state.data.findIndex(player => (player.nom === playerName));\n    newState[index] = {...newState[index], value: newValue}\n    this.setState({\n      data: newState,\n      });\n    \n    try{\n      ref.child(index).update({value: newValue})\n      //ref.set(this.state.data.sort((a, b) => a.value < b.value))\n    } catch (error) {\n      console.log(error);\n    }\n    \n  }\n  \n\n  render() {\n    return (\n      <div class=\"App\">\n        <div class=\"main container\">\n        <div class=\"container mytitle\">\n          <h1 class=\"title is-1\">Failed chall counter</h1>\n        </div>\n        <div class=\"container has-text-centered\">\n          <div class=\"tile mytile\">\n            <ul class=\"tile is-vertical players\">\n              {\n                this.state.data.map( (player, i) => {\n                  return (\n                    <Player \n                      nom={player.nom} \n                      value={player.value}\n                      updateCount={this.handleCount.bind(this)}\n                      key={i}\n                      />\n                  )\n                })\n              }\n            </ul>\n          </div>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}